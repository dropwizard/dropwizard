package io.dropwizard;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import io.dropwizard.cli.EnvironmentCommand;
import io.dropwizard.setup.Environment;
import net.sourceforge.argparse4j.inf.Namespace;

/**
 * Prints a JSON representation of the configuration generated by merging all referenced configuration files.
 * Use to verify that the configuration being loaded is correct.
 * 
 * @author JAshe
 * @param <T>
 */
public class DisplayMergedConfigCommand<T extends Configuration> extends EnvironmentCommand<T> {
    private final Class<T> configurationClass;

    /**
     * Create a display merge config command
     * 
     * @param application 
     */
    public DisplayMergedConfigCommand(Application<T> application) {
        super(application, "display-config", "Prints the config");
        this.configurationClass = application.getConfigurationClass();
    }

    /*
     * Since we don't subclass ServerCommand, we need a concrete reference to the configuration
     * class.
     */
    @Override
    protected Class<T> getConfigurationClass() {
        return configurationClass;
    }
    
    @Override
    protected void run(Environment environment, Namespace namespace, T configuration) throws Exception {
        // print out configuration
        ObjectMapper mapper = new ObjectMapper();
        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();
        System.out.println(writer.writeValueAsString(configuration));
    }
}